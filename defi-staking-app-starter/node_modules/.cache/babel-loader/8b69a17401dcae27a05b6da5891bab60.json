{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/16036diego/Desktop/Desktop/DApp Udemy Course/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/16036diego/Desktop/Desktop/DApp Udemy Course/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EmitterInstance = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar Enums_1 = require(\"../../Enums\");\n\nvar EmitterSize_1 = require(\"./Options/Classes/EmitterSize\");\n\nfunction randomCoordinate(position, offset) {\n  return position + offset * (Math.random() - 0.5);\n}\n\nfunction randomPosition(position, offset) {\n  return {\n    x: randomCoordinate(position.x, offset.x),\n    y: randomCoordinate(position.y, offset.y)\n  };\n}\n\nvar EmitterInstance = /*#__PURE__*/function () {\n  function EmitterInstance(emitters, container, emitterOptions, position) {\n    _classCallCheck(this, EmitterInstance);\n\n    var _a, _b, _c, _d, _e, _f;\n\n    var _g;\n\n    this.emitters = emitters;\n    this.container = container;\n    this.firstSpawn = true;\n    this.currentDuration = 0;\n    this.currentEmitDelay = 0;\n    this.currentSpawnDelay = 0;\n    this.initialPosition = position;\n    this.emitterOptions = Utils_1.deepExtend({}, emitterOptions);\n    this.spawnDelay = ((_a = this.emitterOptions.life.delay) !== null && _a !== void 0 ? _a : 0) * 1000 / this.container.retina.reduceFactor;\n    this.position = (_b = this.initialPosition) !== null && _b !== void 0 ? _b : this.calcPosition();\n    this.name = emitterOptions.name;\n    var particlesOptions = Utils_1.deepExtend({}, this.emitterOptions.particles);\n    particlesOptions !== null && particlesOptions !== void 0 ? particlesOptions : particlesOptions = {};\n    (_c = particlesOptions.move) !== null && _c !== void 0 ? _c : particlesOptions.move = {};\n    (_d = (_g = particlesOptions.move).direction) !== null && _d !== void 0 ? _d : _g.direction = this.emitterOptions.direction;\n\n    if (this.emitterOptions.spawnColor !== undefined) {\n      this.spawnColor = Utils_1.colorToHsl(this.emitterOptions.spawnColor);\n    }\n\n    this.paused = !this.emitterOptions.autoPlay;\n    this.particlesOptions = particlesOptions;\n    this.size = (_e = this.emitterOptions.size) !== null && _e !== void 0 ? _e : function () {\n      var size = new EmitterSize_1.EmitterSize();\n      size.load({\n        height: 0,\n        mode: Enums_1.SizeMode.percent,\n        width: 0\n      });\n      return size;\n    }();\n    this.lifeCount = (_f = this.emitterOptions.life.count) !== null && _f !== void 0 ? _f : -1;\n    this.immortal = this.lifeCount <= 0;\n    this.play();\n  }\n\n  _createClass(EmitterInstance, [{\n    key: \"externalPlay\",\n    value: function externalPlay() {\n      this.paused = false;\n      this.play();\n    }\n  }, {\n    key: \"externalPause\",\n    value: function externalPause() {\n      this.paused = true;\n      this.pause();\n    }\n  }, {\n    key: \"play\",\n    value: function play() {\n      if (this.paused) {\n        return;\n      }\n\n      if (this.container.retina.reduceFactor && (this.lifeCount > 0 || this.immortal || !this.emitterOptions.life.count)) {\n        if (this.emitDelay === undefined) {\n          var delay = Utils_1.getRangeValue(this.emitterOptions.rate.delay);\n          this.emitDelay = 1000 * delay / this.container.retina.reduceFactor;\n        }\n\n        if (this.lifeCount > 0 || this.immortal) {\n          this.prepareToDie();\n        }\n      }\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      if (this.paused) {\n        return;\n      }\n\n      delete this.emitDelay;\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var initialPosition = this.initialPosition;\n      this.position = initialPosition && Utils_1.isPointInside(initialPosition, this.container.canvas.size) ? initialPosition : this.calcPosition();\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      var _a, _b, _c;\n\n      if (this.paused) {\n        return;\n      }\n\n      if (this.firstSpawn) {\n        this.firstSpawn = false;\n        this.currentSpawnDelay = (_a = this.spawnDelay) !== null && _a !== void 0 ? _a : 0;\n        this.currentEmitDelay = (_b = this.emitDelay) !== null && _b !== void 0 ? _b : 0;\n        delta.value = 0;\n      }\n\n      if (this.duration !== undefined) {\n        this.currentDuration += delta.value;\n\n        if (this.currentDuration >= this.duration) {\n          this.pause();\n\n          if (this.spawnDelay !== undefined) {\n            delete this.spawnDelay;\n          }\n\n          if (!this.immortal) {\n            this.lifeCount--;\n          }\n\n          if (this.lifeCount > 0 || this.immortal) {\n            this.position = this.calcPosition();\n            this.spawnDelay = ((_c = this.emitterOptions.life.delay) !== null && _c !== void 0 ? _c : 0) * 1000 / this.container.retina.reduceFactor;\n          } else {\n            this.destroy();\n          }\n\n          this.currentDuration -= this.duration;\n          delete this.duration;\n        }\n      }\n\n      if (this.spawnDelay !== undefined) {\n        this.currentSpawnDelay += delta.value;\n\n        if (this.currentSpawnDelay >= this.spawnDelay) {\n          this.play();\n          this.currentSpawnDelay -= this.currentSpawnDelay;\n          delete this.spawnDelay;\n        }\n      }\n\n      if (this.emitDelay !== undefined) {\n        this.currentEmitDelay += delta.value;\n\n        if (this.currentEmitDelay >= this.emitDelay) {\n          this.emit();\n          this.currentEmitDelay -= this.emitDelay;\n        }\n      }\n    }\n  }, {\n    key: \"prepareToDie\",\n    value: function prepareToDie() {\n      var _a;\n\n      if (this.paused) {\n        return;\n      }\n\n      var duration = (_a = this.emitterOptions.life) === null || _a === void 0 ? void 0 : _a.duration;\n\n      if (this.container.retina.reduceFactor && (this.lifeCount > 0 || this.immortal) && duration !== undefined && duration > 0) {\n        this.duration = duration * 1000;\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.emitters.removeEmitter(this);\n    }\n  }, {\n    key: \"calcPosition\",\n    value: function calcPosition() {\n      var _a, _b;\n\n      var container = this.container;\n      var percentPosition = this.emitterOptions.position;\n      return {\n        x: ((_a = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.x) !== null && _a !== void 0 ? _a : Math.random() * 100) / 100 * container.canvas.size.width,\n        y: ((_b = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.y) !== null && _b !== void 0 ? _b : Math.random() * 100) / 100 * container.canvas.size.height\n      };\n    }\n  }, {\n    key: \"emit\",\n    value: function emit() {\n      var _a;\n\n      if (this.paused) {\n        return;\n      }\n\n      var container = this.container;\n      var position = this.position;\n      var offset = {\n        x: this.size.mode === Enums_1.SizeMode.percent ? container.canvas.size.width * this.size.width / 100 : this.size.width,\n        y: this.size.mode === Enums_1.SizeMode.percent ? container.canvas.size.height * this.size.height / 100 : this.size.height\n      };\n      var quantity = Utils_1.getRangeValue(this.emitterOptions.rate.quantity);\n\n      for (var i = 0; i < quantity; i++) {\n        var particlesOptions = Utils_1.deepExtend({}, this.particlesOptions);\n\n        if (this.spawnColor !== undefined) {\n          var colorAnimation = (_a = this.emitterOptions.spawnColor) === null || _a === void 0 ? void 0 : _a.animation;\n\n          if (colorAnimation) {\n            var hueAnimation = colorAnimation;\n\n            if (hueAnimation.enable) {\n              this.spawnColor.h = this.setColorAnimation(hueAnimation, this.spawnColor.h, 360);\n            } else {\n              var hslAnimation = colorAnimation;\n              this.spawnColor.h = this.setColorAnimation(hslAnimation.h, this.spawnColor.h, 360);\n              this.spawnColor.s = this.setColorAnimation(hslAnimation.s, this.spawnColor.s, 100);\n              this.spawnColor.l = this.setColorAnimation(hslAnimation.l, this.spawnColor.l, 100);\n            }\n          }\n\n          if (!particlesOptions.color) {\n            particlesOptions.color = {\n              value: this.spawnColor\n            };\n          } else {\n            particlesOptions.color.value = this.spawnColor;\n          }\n        }\n\n        container.particles.addParticle(randomPosition(position, offset), particlesOptions);\n      }\n    }\n  }, {\n    key: \"setColorAnimation\",\n    value: function setColorAnimation(animation, initValue, maxValue) {\n      var _a;\n\n      var container = this.container;\n\n      if (!animation.enable) {\n        return initValue;\n      }\n\n      var colorOffset = Utils_1.randomInRange(animation.offset);\n      var delay = Utils_1.getRangeValue(this.emitterOptions.rate.delay);\n      var emitFactor = 1000 * delay / container.retina.reduceFactor;\n      var colorSpeed = (_a = animation.speed) !== null && _a !== void 0 ? _a : 0;\n      return (initValue + colorSpeed * container.fpsLimit / emitFactor + colorOffset * 3.6) % maxValue;\n    }\n  }]);\n\n  return EmitterInstance;\n}();\n\nexports.EmitterInstance = EmitterInstance;","map":null,"metadata":{},"sourceType":"script"}