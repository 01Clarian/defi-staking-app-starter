{"ast":null,"code":"import _classCallCheck from \"/Users/16036diego/Desktop/Desktop/DApp Udemy Course/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/16036diego/Desktop/Desktop/DApp Udemy Course/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/16036diego/Desktop/Desktop/DApp Udemy Course/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/16036diego/Desktop/Desktop/DApp Udemy Course/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/16036diego/Desktop/Desktop/DApp Udemy Course/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/16036diego/Desktop/Desktop/DApp Udemy Course/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/16036diego/Desktop/Desktop/DApp Udemy Course/defi-staking-app-starter/defi-staking-app-starter/src/components/Airdrop.js\";\nimport React, { Component } from 'react';\nimport { getTextOfJSDocComment } from 'typescript';\n\nvar Airdrop = /*#__PURE__*/function (_Component) {\n  _inherits(Airdrop, _Component);\n\n  /* NOTES: \n   Airdrop to have a timer that counts down\n  initialize the countdown only AFTER the customers have staked a certain amount \n  which is 50 tokens\n  Functionality:\n      Start Time\n      Countdown\n      State -- for time to work\n  */\n  function Airdrop() {\n    var _this;\n\n    _classCallCheck(this, Airdrop);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Airdrop).call(this));\n    _this.state = {\n      time: {},\n      seconds: 20\n    };\n    _this.timer = 0; // Initializing our timer at 0\n\n    _this.startTime = _this.startTime.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.countDown = _this.countDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Airdrop, [{\n    key: \"secondsToTime\",\n    value: function secondsToTime(secs) {\n      var hours, minutes, seconds; //20,000 seconds \n\n      hours = Math.floor(secs / (60 * 60)); // 60 seconds per min, 60 min per hour\n\n      var devisor_for_minutes = secs % (60 * 60);\n      minutes = Math.floor(devisor_for_minutes / 60);\n      var devisor_for_seconds = minutes % 60;\n      seconds = Math.ceil(devisor_for_seconds);\n      var obj = {\n        'h': hours,\n        'm': minutes,\n        's': seconds\n      };\n      return obj;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var timeLeftVar = this.secondsToTime(this.state.seconds);\n      this.setState = {\n        time: timeLeftVar\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          color: 'black'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }\n      }, this.state.time.m, \":\", this.state.time.s);\n    }\n  }]);\n\n  return Airdrop;\n}(Component);\n\nexport default Airdrop;","map":{"version":3,"sources":["/Users/16036diego/Desktop/Desktop/DApp Udemy Course/defi-staking-app-starter/defi-staking-app-starter/src/components/Airdrop.js"],"names":["React","Component","getTextOfJSDocComment","Airdrop","state","time","seconds","timer","startTime","bind","countDown","secs","hours","minutes","Math","floor","devisor_for_minutes","devisor_for_seconds","ceil","obj","timeLeftVar","secondsToTime","setState","color","m","s"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,qBAAT,QAAsC,YAAtC;;IAGMC,O;;;AACF;;;;;;;;;AAWA,qBAAc;AAAA;;AAAA;;AACV;AACA,UAAKC,KAAL,GAAa;AAACC,MAAAA,IAAI,EAAE,EAAP;AAAWC,MAAAA,OAAO,EAAC;AAAnB,KAAb;AACA,UAAKC,KAAL,GAAa,CAAb,CAHU,CAGK;;AACf,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,uDAAjB;AACA,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeD,IAAf,uDAAjB;AALU;AAMb;;;;kCAEaE,I,EAAM;AAChB,UAAIC,KAAJ,EAAWC,OAAX,EAAoBP,OAApB,CADgB,CAEhB;;AACAM,MAAAA,KAAK,GAAGE,IAAI,CAACC,KAAL,CAAWJ,IAAI,IAAG,KAAK,EAAR,CAAf,CAAR,CAHgB,CAGoB;;AAEpC,UAAIK,mBAAmB,GAAGL,IAAI,IAAI,KAAG,EAAP,CAA9B;AACAE,MAAAA,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,mBAAmB,GAAC,EAA/B,CAAV;AAEA,UAAIC,mBAAmB,GAAGJ,OAAO,GAAI,EAArC;AACAP,MAAAA,OAAO,GAAGQ,IAAI,CAACI,IAAL,CAAUD,mBAAV,CAAV;AAEA,UAAIE,GAAG,GAAG;AACN,aAAIP,KADE;AAEN,aAAIC,OAFE;AAGN,aAAIP;AAHE,OAAV;AAKA,aAAOa,GAAP;AACH;;;wCAEmB;AAChB,UAAIC,WAAW,GAAG,KAAKC,aAAL,CAAmB,KAAKjB,KAAL,CAAWE,OAA9B,CAAlB;AACA,WAAKgB,QAAL,GAAgB;AAACjB,QAAAA,IAAI,EAAEe;AAAP,OAAhB;AACH;;;6BACQ;AACL,0BACI;AAAK,QAAA,KAAK,EAAG;AAACG,UAAAA,KAAK,EAAC;AAAP,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKnB,KAAL,CAAWC,IAAX,CAAgBmB,CADrB,OACyB,KAAKpB,KAAL,CAAWC,IAAX,CAAgBoB,CADzC,CADJ;AAMH;;;;EAlDiBxB,S;;AAsDtB,eAAeE,OAAf","sourcesContent":["import React, {Component} from 'react'\nimport { getTextOfJSDocComment } from 'typescript';\n\n\nclass Airdrop extends Component {\n    /* NOTES: \n\n    Airdrop to have a timer that counts down\n    initialize the countdown only AFTER the customers have staked a certain amount \n    which is 50 tokens\n    Functionality:\n        Start Time\n        Countdown\n        State -- for time to work\n    */\n    \n    constructor() {\n        super()\n        this.state = {time: {}, seconds:20 }\n        this.timer = 0 // Initializing our timer at 0\n        this.startTime = this.startTime.bind(this);\n        this.countDown = this.countDown.bind(this);\n    }    \n\n    secondsToTime(secs) {\n        let hours, minutes, seconds\n        //20,000 seconds \n        hours = Math.floor(secs/ (60 * 60)) // 60 seconds per min, 60 min per hour\n\n        let devisor_for_minutes = secs % (60*60)\n        minutes = Math.floor(devisor_for_minutes/60)\n\n        let devisor_for_seconds = minutes % (60)\n        seconds = Math.ceil(devisor_for_seconds)\n\n        let obj = {\n            'h':hours,\n            'm':minutes,\n            's':seconds\n        }\n        return obj\n    }\n\n    componentDidMount() {\n        let timeLeftVar = this.secondsToTime(this.state.seconds)\n        this.setState = {time: timeLeftVar}\n    }\n    render() {\n        return (\n            <div style= {{color:'black'}}>\n                {this.state.time.m}:{this.state.time.s}\n\n            </div>\n        )\n    }\n\n}\n\nexport default Airdrop;"]},"metadata":{},"sourceType":"module"}