{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/16036diego/Desktop/Desktop/DApp Udemy Course/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/16036diego/Desktop/Desktop/DApp Udemy Course/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CanvasUtils = exports.drawPlugin = exports.drawShapeAfterEffect = exports.drawShape = exports.drawParticle = exports.drawParticleShadow = exports.drawLight = exports.drawGrabLine = exports.gradient = exports.drawConnectLine = exports.drawLinkTriangle = exports.drawLinkLine = exports.clear = exports.paintBase = void 0;\n\nvar NumberUtils_1 = require(\"./NumberUtils\");\n\nvar ColorUtils_1 = require(\"./ColorUtils\");\n\nfunction drawLine(context, begin, end) {\n  context.beginPath();\n  context.moveTo(begin.x, begin.y);\n  context.lineTo(end.x, end.y);\n  context.closePath();\n}\n\nfunction drawTriangle(context, p1, p2, p3) {\n  context.beginPath();\n  context.moveTo(p1.x, p1.y);\n  context.lineTo(p2.x, p2.y);\n  context.lineTo(p3.x, p3.y);\n  context.closePath();\n}\n\nfunction _paintBase(context, dimension, baseColor) {\n  context.save();\n  context.fillStyle = baseColor !== null && baseColor !== void 0 ? baseColor : \"rgba(0,0,0,0)\";\n  context.fillRect(0, 0, dimension.width, dimension.height);\n  context.restore();\n}\n\nexports.paintBase = _paintBase;\n\nfunction _clear(context, dimension) {\n  context.clearRect(0, 0, dimension.width, dimension.height);\n}\n\nexports.clear = _clear;\n\nfunction _drawLinkLine(context, width, begin, end, maxDistance, canvasSize, warp, backgroundMask, composite, colorLine, opacity, shadow) {\n  var drawn = false;\n\n  if (NumberUtils_1.getDistance(begin, end) <= maxDistance) {\n    drawLine(context, begin, end);\n    drawn = true;\n  } else if (warp) {\n    var pi1;\n    var pi2;\n    var endNE = {\n      x: end.x - canvasSize.width,\n      y: end.y\n    };\n    var d1 = NumberUtils_1.getDistances(begin, endNE);\n\n    if (d1.distance <= maxDistance) {\n      var yi = begin.y - d1.dy / d1.dx * begin.x;\n      pi1 = {\n        x: 0,\n        y: yi\n      };\n      pi2 = {\n        x: canvasSize.width,\n        y: yi\n      };\n    } else {\n      var endSW = {\n        x: end.x,\n        y: end.y - canvasSize.height\n      };\n      var d2 = NumberUtils_1.getDistances(begin, endSW);\n\n      if (d2.distance <= maxDistance) {\n        var _yi = begin.y - d2.dy / d2.dx * begin.x;\n\n        var xi = -_yi / (d2.dy / d2.dx);\n        pi1 = {\n          x: xi,\n          y: 0\n        };\n        pi2 = {\n          x: xi,\n          y: canvasSize.height\n        };\n      } else {\n        var endSE = {\n          x: end.x - canvasSize.width,\n          y: end.y - canvasSize.height\n        };\n        var d3 = NumberUtils_1.getDistances(begin, endSE);\n\n        if (d3.distance <= maxDistance) {\n          var _yi2 = begin.y - d3.dy / d3.dx * begin.x;\n\n          var _xi = -_yi2 / (d3.dy / d3.dx);\n\n          pi1 = {\n            x: _xi,\n            y: _yi2\n          };\n          pi2 = {\n            x: pi1.x + canvasSize.width,\n            y: pi1.y + canvasSize.height\n          };\n        }\n      }\n    }\n\n    if (pi1 && pi2) {\n      drawLine(context, begin, pi1);\n      drawLine(context, end, pi2);\n      drawn = true;\n    }\n  }\n\n  if (!drawn) {\n    return;\n  }\n\n  context.lineWidth = width;\n\n  if (backgroundMask) {\n    context.globalCompositeOperation = composite;\n  }\n\n  context.strokeStyle = ColorUtils_1.getStyleFromRgb(colorLine, opacity);\n\n  if (shadow.enable) {\n    var shadowColor = ColorUtils_1.colorToRgb(shadow.color);\n\n    if (shadowColor) {\n      context.shadowBlur = shadow.blur;\n      context.shadowColor = ColorUtils_1.getStyleFromRgb(shadowColor);\n    }\n  }\n\n  context.stroke();\n}\n\nexports.drawLinkLine = _drawLinkLine;\n\nfunction _drawLinkTriangle(context, pos1, pos2, pos3, backgroundMask, composite, colorTriangle, opacityTriangle) {\n  drawTriangle(context, pos1, pos2, pos3);\n\n  if (backgroundMask) {\n    context.globalCompositeOperation = composite;\n  }\n\n  context.fillStyle = ColorUtils_1.getStyleFromRgb(colorTriangle, opacityTriangle);\n  context.fill();\n}\n\nexports.drawLinkTriangle = _drawLinkTriangle;\n\nfunction _drawConnectLine(context, width, lineStyle, begin, end) {\n  context.save();\n  drawLine(context, begin, end);\n  context.lineWidth = width;\n  context.strokeStyle = lineStyle;\n  context.stroke();\n  context.restore();\n}\n\nexports.drawConnectLine = _drawConnectLine;\n\nfunction _gradient(context, p1, p2, opacity) {\n  var gradStop = Math.floor(p2.getRadius() / p1.getRadius());\n  var color1 = p1.getFillColor();\n  var color2 = p2.getFillColor();\n\n  if (!color1 || !color2) {\n    return;\n  }\n\n  var sourcePos = p1.getPosition();\n  var destPos = p2.getPosition();\n  var midRgb = ColorUtils_1.colorMix(color1, color2, p1.getRadius(), p2.getRadius());\n  var grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n  grad.addColorStop(0, ColorUtils_1.getStyleFromHsl(color1, opacity));\n  grad.addColorStop(gradStop > 1 ? 1 : gradStop, ColorUtils_1.getStyleFromRgb(midRgb, opacity));\n  grad.addColorStop(1, ColorUtils_1.getStyleFromHsl(color2, opacity));\n  return grad;\n}\n\nexports.gradient = _gradient;\n\nfunction _drawGrabLine(context, width, begin, end, colorLine, opacity) {\n  context.save();\n  drawLine(context, begin, end);\n  context.strokeStyle = ColorUtils_1.getStyleFromRgb(colorLine, opacity);\n  context.lineWidth = width;\n  context.stroke();\n  context.restore();\n}\n\nexports.drawGrabLine = _drawGrabLine;\n\nfunction _drawLight(container, context, mousePos) {\n  var lightOptions = container.actualOptions.interactivity.modes.light.area;\n  context.beginPath();\n  context.arc(mousePos.x, mousePos.y, lightOptions.radius, 0, 2 * Math.PI);\n  var gradientAmbientLight = context.createRadialGradient(mousePos.x, mousePos.y, 0, mousePos.x, mousePos.y, lightOptions.radius);\n  var gradient = lightOptions.gradient;\n  var gradientRgb = {\n    start: ColorUtils_1.colorToRgb(gradient.start),\n    stop: ColorUtils_1.colorToRgb(gradient.stop)\n  };\n\n  if (!gradientRgb.start || !gradientRgb.stop) {\n    return;\n  }\n\n  gradientAmbientLight.addColorStop(0, ColorUtils_1.getStyleFromRgb(gradientRgb.start));\n  gradientAmbientLight.addColorStop(1, ColorUtils_1.getStyleFromRgb(gradientRgb.stop));\n  context.fillStyle = gradientAmbientLight;\n  context.fill();\n}\n\nexports.drawLight = _drawLight;\n\nfunction _drawParticleShadow(container, context, particle, mousePos) {\n  var pos = particle.getPosition();\n  var shadowOptions = container.actualOptions.interactivity.modes.light.shadow;\n  context.save();\n  var radius = particle.getRadius();\n  var sides = particle.sides;\n  var full = Math.PI * 2 / sides;\n  var angle = -particle.rotate.value + Math.PI / 4;\n  var factor = 1;\n  var dots = [];\n\n  for (var i = 0; i < sides; i++) {\n    dots.push({\n      x: pos.x + radius * Math.sin(angle + full * i) * factor,\n      y: pos.y + radius * Math.cos(angle + full * i) * factor\n    });\n  }\n\n  var points = [];\n  var shadowLength = shadowOptions.length;\n\n  for (var _i = 0, _dots = dots; _i < _dots.length; _i++) {\n    var dot = _dots[_i];\n    var dotAngle = Math.atan2(mousePos.y - dot.y, mousePos.x - dot.x);\n    var endX = dot.x + shadowLength * Math.sin(-dotAngle - Math.PI / 2);\n    var endY = dot.y + shadowLength * Math.cos(-dotAngle - Math.PI / 2);\n    points.push({\n      endX: endX,\n      endY: endY,\n      startX: dot.x,\n      startY: dot.y\n    });\n  }\n\n  var shadowRgb = ColorUtils_1.colorToRgb(shadowOptions.color);\n\n  if (!shadowRgb) {\n    return;\n  }\n\n  var shadowColor = ColorUtils_1.getStyleFromRgb(shadowRgb);\n\n  for (var _i2 = points.length - 1; _i2 >= 0; _i2--) {\n    var n = _i2 == points.length - 1 ? 0 : _i2 + 1;\n    context.beginPath();\n    context.moveTo(points[_i2].startX, points[_i2].startY);\n    context.lineTo(points[n].startX, points[n].startY);\n    context.lineTo(points[n].endX, points[n].endY);\n    context.lineTo(points[_i2].endX, points[_i2].endY);\n    context.fillStyle = shadowColor;\n    context.fill();\n  }\n\n  context.restore();\n}\n\nexports.drawParticleShadow = _drawParticleShadow;\n\nfunction _drawParticle(container, context, particle, delta, fillColorValue, strokeColorValue, backgroundMask, composite, radius, opacity, shadow) {\n  var pos = particle.getPosition();\n  var tiltOptions = particle.options.tilt;\n  var rollOptions = particle.options.roll;\n  context.save();\n\n  if (tiltOptions.enable || rollOptions.enable) {\n    context.setTransform(rollOptions.enable ? Math.cos(particle.rollAngle) : 1, tiltOptions.enable ? Math.cos(particle.tilt.value) * particle.tilt.cosDirection : 0, tiltOptions.enable ? Math.sin(particle.tilt.value) * particle.tilt.sinDirection : 0, rollOptions.enable ? Math.sin(particle.rollAngle) : 1, pos.x, pos.y);\n  } else {\n    context.translate(pos.x, pos.y);\n  }\n\n  context.beginPath();\n  var angle = particle.rotate.value + (particle.options.rotate.path ? particle.velocity.angle : 0);\n\n  if (angle !== 0) {\n    context.rotate(angle);\n  }\n\n  if (backgroundMask) {\n    context.globalCompositeOperation = composite;\n  }\n\n  var shadowColor = particle.shadowColor;\n\n  if (shadow.enable && shadowColor) {\n    context.shadowBlur = shadow.blur;\n    context.shadowColor = ColorUtils_1.getStyleFromRgb(shadowColor);\n    context.shadowOffsetX = shadow.offset.x;\n    context.shadowOffsetY = shadow.offset.y;\n  }\n\n  if (fillColorValue) {\n    context.fillStyle = fillColorValue;\n  }\n\n  var stroke = particle.stroke;\n  context.lineWidth = particle.strokeWidth;\n\n  if (strokeColorValue) {\n    context.strokeStyle = strokeColorValue;\n  }\n\n  _drawShape(container, context, particle, radius, opacity, delta);\n\n  if (stroke.width > 0) {\n    context.stroke();\n  }\n\n  if (particle.close) {\n    context.closePath();\n  }\n\n  if (particle.fill) {\n    context.fill();\n  }\n\n  context.restore();\n  context.save();\n\n  if (tiltOptions.enable) {\n    context.setTransform(1, Math.cos(particle.tilt.value) * particle.tilt.cosDirection, Math.sin(particle.tilt.value) * particle.tilt.sinDirection, 1, pos.x, pos.y);\n  } else {\n    context.translate(pos.x, pos.y);\n  }\n\n  if (angle !== 0) {\n    context.rotate(angle);\n  }\n\n  if (backgroundMask) {\n    context.globalCompositeOperation = composite;\n  }\n\n  _drawShapeAfterEffect(container, context, particle, radius, opacity, delta);\n\n  context.restore();\n}\n\nexports.drawParticle = _drawParticle;\n\nfunction _drawShape(container, context, particle, radius, opacity, delta) {\n  if (!particle.shape) {\n    return;\n  }\n\n  var drawer = container.drawers.get(particle.shape);\n\n  if (!drawer) {\n    return;\n  }\n\n  drawer.draw(context, particle, radius, opacity, delta, container.retina.pixelRatio);\n}\n\nexports.drawShape = _drawShape;\n\nfunction _drawShapeAfterEffect(container, context, particle, radius, opacity, delta) {\n  if (!particle.shape) {\n    return;\n  }\n\n  var drawer = container.drawers.get(particle.shape);\n\n  if (!(drawer === null || drawer === void 0 ? void 0 : drawer.afterEffect)) {\n    return;\n  }\n\n  drawer.afterEffect(context, particle, radius, opacity, delta, container.retina.pixelRatio);\n}\n\nexports.drawShapeAfterEffect = _drawShapeAfterEffect;\n\nfunction _drawPlugin(context, plugin, delta) {\n  if (!plugin.draw) {\n    return;\n  }\n\n  context.save();\n  plugin.draw(context, delta);\n  context.restore();\n}\n\nexports.drawPlugin = _drawPlugin;\n\nvar CanvasUtils = /*#__PURE__*/function () {\n  function CanvasUtils() {\n    _classCallCheck(this, CanvasUtils);\n  }\n\n  _createClass(CanvasUtils, null, [{\n    key: \"paintBase\",\n    value: function paintBase(context, dimension, baseColor) {\n      _paintBase(context, dimension, baseColor);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear(context, dimension) {\n      _clear(context, dimension);\n    }\n  }, {\n    key: \"drawLinkLine\",\n    value: function drawLinkLine(context, width, begin, end, maxDistance, canvasSize, warp, backgroundMask, composite, colorLine, opacity, shadow) {\n      _drawLinkLine(context, width, begin, end, maxDistance, canvasSize, warp, backgroundMask, composite, colorLine, opacity, shadow);\n    }\n  }, {\n    key: \"drawLinkTriangle\",\n    value: function drawLinkTriangle(context, pos1, pos2, pos3, backgroundMask, composite, colorTriangle, opacityTriangle) {\n      _drawLinkTriangle(context, pos1, pos2, pos3, backgroundMask, composite, colorTriangle, opacityTriangle);\n    }\n  }, {\n    key: \"drawConnectLine\",\n    value: function drawConnectLine(context, width, lineStyle, begin, end) {\n      _drawConnectLine(context, width, lineStyle, begin, end);\n    }\n  }, {\n    key: \"gradient\",\n    value: function gradient(context, p1, p2, opacity) {\n      return _gradient(context, p1, p2, opacity);\n    }\n  }, {\n    key: \"drawGrabLine\",\n    value: function drawGrabLine(context, width, begin, end, colorLine, opacity) {\n      _drawGrabLine(context, width, begin, end, colorLine, opacity);\n    }\n  }, {\n    key: \"drawLight\",\n    value: function drawLight(container, context, mousePos) {\n      _drawLight(container, context, mousePos);\n    }\n  }, {\n    key: \"drawParticleShadow\",\n    value: function drawParticleShadow(container, context, particle, mousePos) {\n      _drawParticleShadow(container, context, particle, mousePos);\n    }\n  }, {\n    key: \"drawParticle\",\n    value: function drawParticle(container, context, particle, delta, fillColorValue, strokeColorValue, backgroundMask, composite, radius, opacity, shadow) {\n      _drawParticle(container, context, particle, delta, fillColorValue, strokeColorValue, backgroundMask, composite, radius, opacity, shadow);\n    }\n  }, {\n    key: \"drawShape\",\n    value: function drawShape(container, context, particle, radius, opacity, delta) {\n      _drawShape(container, context, particle, radius, opacity, delta);\n    }\n  }, {\n    key: \"drawShapeAfterEffect\",\n    value: function drawShapeAfterEffect(container, context, particle, radius, opacity, delta) {\n      _drawShapeAfterEffect(container, context, particle, radius, opacity, delta);\n    }\n  }, {\n    key: \"drawPlugin\",\n    value: function drawPlugin(context, plugin, delta) {\n      _drawPlugin(context, plugin, delta);\n    }\n  }]);\n\n  return CanvasUtils;\n}();\n\nexports.CanvasUtils = CanvasUtils;","map":null,"metadata":{},"sourceType":"script"}