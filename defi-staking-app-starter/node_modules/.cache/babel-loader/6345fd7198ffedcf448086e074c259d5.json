{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/16036diego/Desktop/Desktop/DApp Udemy Course/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/16036diego/Desktop/Desktop/DApp Udemy Course/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DivEvent = void 0;\n\nvar Enums_1 = require(\"../../../../Enums\");\n\nvar DivEvent = /*#__PURE__*/function () {\n  function DivEvent() {\n    _classCallCheck(this, DivEvent);\n\n    this.selectors = [];\n    this.enable = false;\n    this.mode = [];\n    this.type = Enums_1.DivType.circle;\n  }\n\n  _createClass(DivEvent, [{\n    key: \"load\",\n    value: function load(data) {\n      var _a, _b;\n\n      if (data === undefined) {\n        return;\n      }\n\n      var ids = (_b = (_a = data.ids) !== null && _a !== void 0 ? _a : data.elementId) !== null && _b !== void 0 ? _b : data.el;\n\n      if (ids !== undefined) {\n        this.ids = ids;\n      }\n\n      if (data.selectors !== undefined) {\n        this.selectors = data.selectors;\n      }\n\n      if (data.enable !== undefined) {\n        this.enable = data.enable;\n      }\n\n      if (data.mode !== undefined) {\n        this.mode = data.mode;\n      }\n\n      if (data.type !== undefined) {\n        this.type = data.type;\n      }\n    }\n  }, {\n    key: \"elementId\",\n    get: function get() {\n      return this.ids;\n    },\n    set: function set(value) {\n      this.ids = value;\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return this.elementId;\n    },\n    set: function set(value) {\n      this.elementId = value;\n    }\n  }, {\n    key: \"ids\",\n    get: function get() {\n      return this.selectors instanceof Array ? this.selectors.map(function (t) {\n        return t.replace(\"#\", \"\");\n      }) : this.selectors.replace(\"#\", \"\");\n    },\n    set: function set(value) {\n      this.selectors = value instanceof Array ? value.map(function (t) {\n        return \"#\".concat(t);\n      }) : \"#\".concat(value);\n    }\n  }]);\n\n  return DivEvent;\n}();\n\nexports.DivEvent = DivEvent;","map":null,"metadata":{},"sourceType":"script"}