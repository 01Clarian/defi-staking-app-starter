{"ast":null,"code":"/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @file WebsocketProvider.js\n * @authors: Samuel Furter <samuel@ethereum.org>, Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2019\n */\n'use strict';\n\nvar EventEmitter = require('eventemitter3');\n\nvar helpers = require('./helpers.js');\n\nvar errors = require('web3-core-helpers').errors;\n\nvar Ws = require('websocket').w3cwebsocket;\n/**\n * @param {string} url\n * @param {Object} options\n *\n * @constructor\n */\n\n\nvar WebsocketProvider = function WebsocketProvider(url, options) {\n  EventEmitter.call(this);\n  options = options || {};\n  this.url = url;\n  this._customTimeout = options.timeout || 1000 * 15;\n  this.headers = options.headers || {};\n  this.protocol = options.protocol || undefined;\n  this.reconnectOptions = Object.assign({\n    auto: false,\n    delay: 5000,\n    maxAttempts: false,\n    onTimeout: false\n  }, options.reconnect);\n  this.clientConfig = options.clientConfig || undefined; // Allow a custom client configuration\n\n  this.requestOptions = options.requestOptions || undefined; // Allow a custom request options (https://github.com/theturtle32/WebSocket-Node/blob/master/docs/WebSocketClient.md#connectrequesturl-requestedprotocols-origin-headers-requestoptions)\n\n  this.DATA = 'data';\n  this.CLOSE = 'close';\n  this.ERROR = 'error';\n  this.CONNECT = 'connect';\n  this.RECONNECT = 'reconnect';\n  this.connection = null;\n  this.requestQueue = new Map();\n  this.responseQueue = new Map();\n  this.reconnectAttempts = 0;\n  this.reconnecting = false; // The w3cwebsocket implementation does not support Basic Auth\n  // username/password in the URL. So generate the basic auth header, and\n  // pass through with any additional headers supplied in constructor\n\n  var parsedURL = helpers.parseURL(url);\n\n  if (parsedURL.username && parsedURL.password) {\n    this.headers.authorization = 'Basic ' + helpers.btoa(parsedURL.username + ':' + parsedURL.password);\n  } // When all node core implementations that do not have the\n  // WHATWG compatible URL parser go out of service this line can be removed.\n\n\n  if (parsedURL.auth) {\n    this.headers.authorization = 'Basic ' + helpers.btoa(parsedURL.auth);\n  } // make property `connected` which will return the current connection status\n\n\n  Object.defineProperty(this, 'connected', {\n    get: function get() {\n      return this.connection && this.connection.readyState === this.connection.OPEN;\n    },\n    enumerable: true\n  });\n  this.connect();\n}; // Inherit from EventEmitter\n\n\nWebsocketProvider.prototype = Object.create(EventEmitter.prototype);\nWebsocketProvider.prototype.constructor = WebsocketProvider;\n/**\n * Connects to the configured node\n *\n * @method connect\n *\n * @returns {void}\n */\n\nWebsocketProvider.prototype.connect = function () {\n  this.connection = new Ws(this.url, this.protocol, undefined, this.headers, this.requestOptions, this.clientConfig);\n\n  this._addSocketListeners();\n};\n/**\n * Listener for the `data` event of the underlying WebSocket object\n *\n * @method _onMessage\n *\n * @returns {void}\n */\n\n\nWebsocketProvider.prototype._onMessage = function (e) {\n  var _this = this;\n\n  this._parseResponse(typeof e.data === 'string' ? e.data : '').forEach(function (result) {\n    if (result.method && result.method.indexOf('_subscription') !== -1) {\n      _this.emit(_this.DATA, result);\n\n      return;\n    }\n\n    var id = result.id; // get the id which matches the returned id\n\n    if (Array.isArray(result)) {\n      id = result[0].id;\n    }\n\n    if (_this.responseQueue.has(id)) {\n      if (_this.responseQueue.get(id).callback !== undefined) {\n        _this.responseQueue.get(id).callback(false, result);\n      }\n\n      _this.responseQueue.delete(id);\n    }\n  });\n};\n/**\n * Listener for the `open` event of the underlying WebSocket object\n *\n * @method _onConnect\n *\n * @returns {void}\n */\n\n\nWebsocketProvider.prototype._onConnect = function () {\n  this.emit(this.CONNECT);\n  this.reconnectAttempts = 0;\n  this.reconnecting = false;\n\n  if (this.requestQueue.size > 0) {\n    var _this = this;\n\n    this.requestQueue.forEach(function (request, key) {\n      _this.send(request.payload, request.callback);\n\n      _this.requestQueue.delete(key);\n    });\n  }\n};\n/**\n * Listener for the `close` event of the underlying WebSocket object\n *\n * @method _onClose\n *\n * @returns {void}\n */\n\n\nWebsocketProvider.prototype._onClose = function (event) {\n  var _this = this;\n\n  if (this.reconnectOptions.auto && (![1000, 1001].includes(event.code) || event.wasClean === false)) {\n    this.reconnect();\n    return;\n  }\n\n  this.emit(this.CLOSE, event);\n\n  if (this.requestQueue.size > 0) {\n    this.requestQueue.forEach(function (request, key) {\n      request.callback(errors.ConnectionNotOpenError(event));\n\n      _this.requestQueue.delete(key);\n    });\n  }\n\n  if (this.responseQueue.size > 0) {\n    this.responseQueue.forEach(function (request, key) {\n      request.callback(errors.InvalidConnection('on WS', event));\n\n      _this.responseQueue.delete(key);\n    });\n  }\n\n  this._removeSocketListeners();\n\n  this.removeAllListeners();\n};\n/**\n * Will add the required socket listeners\n *\n * @method _addSocketListeners\n *\n * @returns {void}\n */\n\n\nWebsocketProvider.prototype._addSocketListeners = function () {\n  this.connection.addEventListener('message', this._onMessage.bind(this));\n  this.connection.addEventListener('open', this._onConnect.bind(this));\n  this.connection.addEventListener('close', this._onClose.bind(this));\n};\n/**\n * Will remove all socket listeners\n *\n * @method _removeSocketListeners\n *\n * @returns {void}\n */\n\n\nWebsocketProvider.prototype._removeSocketListeners = function () {\n  this.connection.removeEventListener('message', this._onMessage);\n  this.connection.removeEventListener('open', this._onConnect);\n  this.connection.removeEventListener('close', this._onClose);\n};\n/**\n * Will parse the response and make an array out of it.\n *\n * @method _parseResponse\n *\n * @param {String} data\n *\n * @returns {Array}\n */\n\n\nWebsocketProvider.prototype._parseResponse = function (data) {\n  var _this = this,\n      returnValues = []; // DE-CHUNKER\n\n\n  var dechunkedData = data.replace(/\\}[\\n\\r]?\\{/g, '}|--|{') // }{\n  .replace(/\\}\\][\\n\\r]?\\[\\{/g, '}]|--|[{') // }][{\n  .replace(/\\}[\\n\\r]?\\[\\{/g, '}|--|[{') // }[{\n  .replace(/\\}\\][\\n\\r]?\\{/g, '}]|--|{') // }]{\n  .split('|--|');\n  dechunkedData.forEach(function (data) {\n    // prepend the last chunk\n    if (_this.lastChunk) data = _this.lastChunk + data;\n    var result = null;\n\n    try {\n      result = JSON.parse(data);\n    } catch (e) {\n      _this.lastChunk = data; // start timeout to cancel all requests\n\n      clearTimeout(_this.lastChunkTimeout);\n      _this.lastChunkTimeout = setTimeout(function () {\n        if (_this.reconnectOptions.auto && _this.reconnectOptions.onTimeout) {\n          _this.reconnect();\n\n          return;\n        }\n\n        _this.emit(_this.ERROR, errors.ConnectionTimeout(_this._customTimeout));\n\n        if (_this.requestQueue.size > 0) {\n          _this.requestQueue.forEach(function (request, key) {\n            request.callback(errors.ConnectionTimeout(_this._customTimeout));\n\n            _this.requestQueue.delete(key);\n          });\n        }\n      }, _this._customTimeout);\n      return;\n    } // cancel timeout and set chunk to null\n\n\n    clearTimeout(_this.lastChunkTimeout);\n    _this.lastChunk = null;\n    if (result) returnValues.push(result);\n  });\n  return returnValues;\n};\n/**\n * Does check if the provider is connecting and will add it to the queue or will send it directly\n *\n * @method send\n *\n * @param {Object} payload\n * @param {Function} callback\n *\n * @returns {void}\n */\n\n\nWebsocketProvider.prototype.send = function (payload, callback) {\n  var _this = this;\n\n  var id = payload.id;\n  var request = {\n    payload: payload,\n    callback: callback\n  };\n\n  if (Array.isArray(payload)) {\n    id = payload[0].id;\n  }\n\n  if (this.connection.readyState === this.connection.CONNECTING || this.reconnecting) {\n    this.requestQueue.set(id, request);\n    return;\n  }\n\n  if (this.connection.readyState !== this.connection.OPEN) {\n    this.requestQueue.delete(id);\n    this.emit(this.ERROR, errors.ConnectionNotOpenError());\n    request.callback(errors.ConnectionNotOpenError());\n    return;\n  }\n\n  this.responseQueue.set(id, request);\n  this.requestQueue.delete(id);\n\n  try {\n    this.connection.send(JSON.stringify(request.payload));\n  } catch (error) {\n    request.callback(error);\n\n    _this.responseQueue.delete(id);\n  }\n};\n/**\n * Resets the providers, clears all callbacks\n *\n * @method reset\n *\n * @returns {void}\n */\n\n\nWebsocketProvider.prototype.reset = function () {\n  this.responseQueue.clear();\n  this.requestQueue.clear();\n  this.removeAllListeners();\n\n  this._removeSocketListeners();\n\n  this._addSocketListeners();\n};\n/**\n * Closes the current connection with the given code and reason arguments\n *\n * @method disconnect\n *\n * @param {number} code\n * @param {string} reason\n *\n * @returns {void}\n */\n\n\nWebsocketProvider.prototype.disconnect = function (code, reason) {\n  this._removeSocketListeners();\n\n  this.connection.close(code || 1000, reason);\n};\n/**\n * Returns the desired boolean.\n *\n * @method supportsSubscriptions\n *\n * @returns {boolean}\n */\n\n\nWebsocketProvider.prototype.supportsSubscriptions = function () {\n  return true;\n};\n/**\n * Removes the listeners and reconnects to the socket.\n *\n * @method reconnect\n *\n * @returns {void}\n */\n\n\nWebsocketProvider.prototype.reconnect = function () {\n  var _this = this;\n\n  this.reconnecting = true;\n\n  if (this.responseQueue.size > 0) {\n    this.responseQueue.forEach(function (request, key) {\n      request.callback(errors.PendingRequestsOnReconnectingError());\n\n      _this.responseQueue.delete(key);\n    });\n  }\n\n  if (!this.reconnectOptions.maxAttempts || this.reconnectAttempts < this.reconnectOptions.maxAttempts) {\n    setTimeout(function () {\n      _this.reconnectAttempts++;\n\n      _this._removeSocketListeners();\n\n      _this.emit(_this.RECONNECT, _this.reconnectAttempts);\n\n      _this.connect();\n    }, this.reconnectOptions.delay);\n    return;\n  }\n\n  this.emit(this.ERROR, errors.MaxAttemptsReachedOnReconnectingError());\n  this.reconnecting = false;\n\n  if (this.requestQueue.size > 0) {\n    this.requestQueue.forEach(function (request, key) {\n      request.callback(errors.MaxAttemptsReachedOnReconnectingError());\n\n      _this.requestQueue.delete(key);\n    });\n  }\n};\n\nmodule.exports = WebsocketProvider;","map":null,"metadata":{},"sourceType":"script"}