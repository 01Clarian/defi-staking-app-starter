{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @file errors.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\"use strict\";\n\nmodule.exports = {\n  ErrorResponse: function ErrorResponse(result) {\n    var message = !!result && !!result.error && !!result.error.message ? result.error.message : JSON.stringify(result);\n    var data = !!result.error && !!result.error.data ? result.error.data : null;\n    var err = new Error('Returned error: ' + message);\n    err.data = data;\n    return err;\n  },\n  InvalidNumberOfParams: function InvalidNumberOfParams(got, expected, method) {\n    return new Error('Invalid number of parameters for \"' + method + '\". Got ' + got + ' expected ' + expected + '!');\n  },\n  InvalidConnection: function InvalidConnection(host, event) {\n    return this.ConnectionError('CONNECTION ERROR: Couldn\\'t connect to node ' + host + '.', event);\n  },\n  InvalidProvider: function InvalidProvider() {\n    return new Error('Provider not set or invalid');\n  },\n  InvalidResponse: function InvalidResponse(result) {\n    var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);\n    return new Error(message);\n  },\n  ConnectionTimeout: function ConnectionTimeout(ms) {\n    return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');\n  },\n  ConnectionNotOpenError: function ConnectionNotOpenError(event) {\n    return this.ConnectionError('connection not open on send()', event);\n  },\n  ConnectionCloseError: function ConnectionCloseError(event) {\n    if (typeof event === 'object' && event.code && event.reason) {\n      return this.ConnectionError('CONNECTION ERROR: The connection got closed with ' + 'the close code `' + event.code + '` and the following ' + 'reason string `' + event.reason + '`', event);\n    }\n\n    return new Error('CONNECTION ERROR: The connection closed unexpectedly');\n  },\n  MaxAttemptsReachedOnReconnectingError: function MaxAttemptsReachedOnReconnectingError() {\n    return new Error('Maximum number of reconnect attempts reached!');\n  },\n  PendingRequestsOnReconnectingError: function PendingRequestsOnReconnectingError() {\n    return new Error('CONNECTION ERROR: Provider started to reconnect before the response got received!');\n  },\n  ConnectionError: function ConnectionError(msg, event) {\n    var error = new Error(msg);\n\n    if (event) {\n      error.code = event.code;\n      error.reason = event.reason;\n    }\n\n    return error;\n  },\n  RevertInstructionError: function RevertInstructionError(reason, signature) {\n    var error = new Error('Your request got reverted with the following reason string: ' + reason);\n    error.reason = reason;\n    error.signature = signature;\n    return error;\n  },\n  TransactionRevertInstructionError: function TransactionRevertInstructionError(reason, signature, receipt) {\n    var error = new Error('Transaction has been reverted by the EVM:\\n' + JSON.stringify(receipt, null, 2));\n    error.reason = reason;\n    error.signature = signature;\n    error.receipt = receipt;\n    return error;\n  },\n  TransactionError: function TransactionError(message, receipt) {\n    var error = new Error(message);\n    error.receipt = receipt;\n    return error;\n  },\n  NoContractAddressFoundError: function NoContractAddressFoundError(receipt) {\n    return this.TransactionError('The transaction receipt didn\\'t contain a contract address.', receipt);\n  },\n  ContractCodeNotStoredError: function ContractCodeNotStoredError(receipt) {\n    return this.TransactionError('The contract code couldn\\'t be stored, please check your gas limit.', receipt);\n  },\n  TransactionRevertedWithoutReasonError: function TransactionRevertedWithoutReasonError(receipt) {\n    return this.TransactionError('Transaction has been reverted by the EVM:\\n' + JSON.stringify(receipt, null, 2), receipt);\n  },\n  TransactionOutOfGasError: function TransactionOutOfGasError(receipt) {\n    return this.TransactionError('Transaction ran out of gas. Please provide more gas:\\n' + JSON.stringify(receipt, null, 2), receipt);\n  },\n  ResolverMethodMissingError: function ResolverMethodMissingError(address, name) {\n    return new Error('The resolver at ' + address + 'does not implement requested method: \"' + name + '\".');\n  },\n  ContractMissingABIError: function ContractMissingABIError() {\n    return new Error('You must provide the json interface of the contract when instantiating a contract object.');\n  },\n  ContractOnceRequiresCallbackError: function ContractOnceRequiresCallbackError() {\n    return new Error('Once requires a callback as the second parameter.');\n  },\n  ContractEventDoesNotExistError: function ContractEventDoesNotExistError(eventName) {\n    return new Error('Event \"' + eventName + '\" doesn\\'t exist in this contract.');\n  },\n  ContractReservedEventError: function ContractReservedEventError(type) {\n    return new Error('The event \"' + type + '\" is a reserved event name, you can\\'t use it.');\n  },\n  ContractMissingDeployDataError: function ContractMissingDeployDataError() {\n    return new Error('No \"data\" specified in neither the given options, nor the default options.');\n  },\n  ContractNoAddressDefinedError: function ContractNoAddressDefinedError() {\n    return new Error('This contract object doesn\\'t have address set yet, please set an address first.');\n  },\n  ContractNoFromAddressDefinedError: function ContractNoFromAddressDefinedError() {\n    return new Error('No \"from\" address specified in neither the given options, nor the default options.');\n  }\n};","map":null,"metadata":{},"sourceType":"script"}