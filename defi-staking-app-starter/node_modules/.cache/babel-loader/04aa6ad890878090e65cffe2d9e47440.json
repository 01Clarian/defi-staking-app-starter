{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/16036diego/Desktop/Desktop/DApp Udemy Course/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/16036diego/Desktop/Desktop/DApp Udemy Course/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadInfectionPlugin = void 0;\n\nvar InfectionInstance_1 = require(\"./InfectionInstance\");\n\nvar ParticlesInfecter_1 = require(\"./ParticlesInfecter\");\n\nvar Infection_1 = require(\"./Options/Classes/Infection\");\n\nvar Plugin = /*#__PURE__*/function () {\n  function Plugin() {\n    _classCallCheck(this, Plugin);\n\n    this.id = \"infection\";\n  }\n\n  _createClass(Plugin, [{\n    key: \"getPlugin\",\n    value: function getPlugin(container) {\n      return new InfectionInstance_1.InfectionInstance(container);\n    }\n  }, {\n    key: \"needsPlugin\",\n    value: function needsPlugin(options) {\n      var _a, _b;\n\n      return (_b = (_a = options === null || options === void 0 ? void 0 : options.infection) === null || _a === void 0 ? void 0 : _a.enable) !== null && _b !== void 0 ? _b : false;\n    }\n  }, {\n    key: \"loadOptions\",\n    value: function loadOptions(options, source) {\n      if (!this.needsPlugin(source)) {\n        return;\n      }\n\n      var optionsCast = options;\n      var infectionOptions = optionsCast.infection;\n\n      if ((infectionOptions === null || infectionOptions === void 0 ? void 0 : infectionOptions.load) === undefined) {\n        optionsCast.infection = infectionOptions = new Infection_1.Infection();\n      }\n\n      infectionOptions.load(source === null || source === void 0 ? void 0 : source.infection);\n    }\n  }]);\n\n  return Plugin;\n}();\n\nfunction loadInfectionPlugin(tsParticles) {\n  var plugin = new Plugin();\n  tsParticles.addPlugin(plugin);\n  tsParticles.addInteractor(\"particlesInfection\", function (container) {\n    return new ParticlesInfecter_1.ParticlesInfecter(container);\n  });\n}\n\nexports.loadInfectionPlugin = loadInfectionPlugin;","map":null,"metadata":{},"sourceType":"script"}