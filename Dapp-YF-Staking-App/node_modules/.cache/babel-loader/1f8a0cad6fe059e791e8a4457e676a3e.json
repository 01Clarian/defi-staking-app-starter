{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/16036diego/Desktop/Desktop/Blockchain/DApp Udemy Course/defi-staking-app-starter/Dapp-YF-Staking-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/16036diego/Desktop/Desktop/Blockchain/DApp Udemy Course/defi-staking-app-starter/Dapp-YF-Staking-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NumberUtils = exports.calcEasing = exports.collisionVelocity = exports.rotateVelocity = exports.getParticleBaseVelocity = exports.getParticleDirectionAngle = exports.getDistance = exports.getDistances = exports.getValue = exports.setRangeValue = exports.getRangeMax = exports.getRangeMin = exports.getRangeValue = exports.randomInRange = exports.mix = exports.clamp = void 0;\n\nvar Enums_1 = require(\"../Enums\");\n\nvar Vector_1 = require(\"../Core/Particle/Vector\");\n\nfunction _clamp(num, min, max) {\n  return Math.min(Math.max(num, min), max);\n}\n\nexports.clamp = _clamp;\n\nfunction _mix(comp1, comp2, weight1, weight2) {\n  return Math.floor((comp1 * weight1 + comp2 * weight2) / (weight1 + weight2));\n}\n\nexports.mix = _mix;\n\nfunction _randomInRange(r) {\n  var max = _getRangeMax(r);\n\n  var min = _getRangeMin(r);\n\n  if (max === min) {\n    min = 0;\n  }\n\n  return Math.random() * (max - min) + min;\n}\n\nexports.randomInRange = _randomInRange;\n\nfunction _getRangeValue(value) {\n  return typeof value === \"number\" ? value : _randomInRange(value);\n}\n\nexports.getRangeValue = _getRangeValue;\n\nfunction _getRangeMin(value) {\n  return typeof value === \"number\" ? value : value.min;\n}\n\nexports.getRangeMin = _getRangeMin;\n\nfunction _getRangeMax(value) {\n  return typeof value === \"number\" ? value : value.max;\n}\n\nexports.getRangeMax = _getRangeMax;\n\nfunction _setRangeValue(source, value) {\n  if (source === value || value === undefined && typeof source === \"number\") {\n    return source;\n  }\n\n  var min = _getRangeMin(source),\n      max = _getRangeMax(source);\n\n  return value !== undefined ? {\n    min: Math.min(min, value),\n    max: Math.max(max, value)\n  } : _setRangeValue(min, max);\n}\n\nexports.setRangeValue = _setRangeValue;\n\nfunction _getValue(options) {\n  var random = options.random;\n\n  var _ref = typeof random === \"boolean\" ? {\n    enable: random,\n    minimumValue: 0\n  } : random,\n      enable = _ref.enable,\n      minimumValue = _ref.minimumValue;\n\n  return enable ? _getRangeValue(_setRangeValue(options.value, minimumValue)) : _getRangeValue(options.value);\n}\n\nexports.getValue = _getValue;\n\nfunction _getDistances(pointA, pointB) {\n  var dx = pointA.x - pointB.x;\n  var dy = pointA.y - pointB.y;\n  return {\n    dx: dx,\n    dy: dy,\n    distance: Math.sqrt(dx * dx + dy * dy)\n  };\n}\n\nexports.getDistances = _getDistances;\n\nfunction _getDistance(pointA, pointB) {\n  return _getDistances(pointA, pointB).distance;\n}\n\nexports.getDistance = _getDistance;\n\nfunction _getParticleDirectionAngle(direction) {\n  if (typeof direction === \"number\") {\n    return direction * Math.PI / 180;\n  } else {\n    switch (direction) {\n      case Enums_1.MoveDirection.top:\n        return -Math.PI / 2;\n\n      case Enums_1.MoveDirection.topRight:\n        return -Math.PI / 4;\n\n      case Enums_1.MoveDirection.right:\n        return 0;\n\n      case Enums_1.MoveDirection.bottomRight:\n        return Math.PI / 4;\n\n      case Enums_1.MoveDirection.bottom:\n        return Math.PI / 2;\n\n      case Enums_1.MoveDirection.bottomLeft:\n        return 3 * Math.PI / 4;\n\n      case Enums_1.MoveDirection.left:\n        return Math.PI;\n\n      case Enums_1.MoveDirection.topLeft:\n        return -3 * Math.PI / 4;\n\n      case Enums_1.MoveDirection.none:\n      default:\n        return Math.random() * Math.PI * 2;\n    }\n  }\n}\n\nexports.getParticleDirectionAngle = _getParticleDirectionAngle;\n\nfunction _getParticleBaseVelocity(direction) {\n  var baseVelocity = Vector_1.Vector.origin;\n  baseVelocity.length = 1;\n  baseVelocity.angle = direction;\n  return baseVelocity;\n}\n\nexports.getParticleBaseVelocity = _getParticleBaseVelocity;\n\nfunction _rotateVelocity(velocity, angle) {\n  return {\n    horizontal: velocity.horizontal * Math.cos(angle) - velocity.vertical * Math.sin(angle),\n    vertical: velocity.horizontal * Math.sin(angle) + velocity.vertical * Math.cos(angle)\n  };\n}\n\nexports.rotateVelocity = _rotateVelocity;\n\nfunction _collisionVelocity(v1, v2, m1, m2) {\n  return Vector_1.Vector.create(v1.x * (m1 - m2) / (m1 + m2) + v2.x * 2 * m2 / (m1 + m2), v1.y);\n}\n\nexports.collisionVelocity = _collisionVelocity;\n\nfunction _calcEasing(value, type) {\n  switch (type) {\n    case Enums_1.EasingType.easeOutQuad:\n      return 1 - Math.pow(1 - value, 2);\n\n    case Enums_1.EasingType.easeOutCubic:\n      return 1 - Math.pow(1 - value, 3);\n\n    case Enums_1.EasingType.easeOutQuart:\n      return 1 - Math.pow(1 - value, 4);\n\n    case Enums_1.EasingType.easeOutQuint:\n      return 1 - Math.pow(1 - value, 5);\n\n    case Enums_1.EasingType.easeOutExpo:\n      return value === 1 ? 1 : 1 - Math.pow(2, -10 * value);\n\n    case Enums_1.EasingType.easeOutSine:\n      return Math.sin(value * Math.PI / 2);\n\n    case Enums_1.EasingType.easeOutBack:\n      {\n        var c1 = 1.70158;\n        var c3 = c1 + 1;\n        return 1 + c3 * Math.pow(value - 1, 3) + c1 * Math.pow(value - 1, 2);\n      }\n\n    case Enums_1.EasingType.easeOutCirc:\n      return Math.sqrt(1 - Math.pow(value - 1, 2));\n\n    default:\n      return value;\n  }\n}\n\nexports.calcEasing = _calcEasing;\n\nvar NumberUtils = /*#__PURE__*/function () {\n  function NumberUtils() {\n    _classCallCheck(this, NumberUtils);\n  }\n\n  _createClass(NumberUtils, null, [{\n    key: \"clamp\",\n    value: function clamp(num, min, max) {\n      return _clamp(num, min, max);\n    }\n  }, {\n    key: \"mix\",\n    value: function mix(comp1, comp2, weight1, weight2) {\n      return _mix(comp1, comp2, weight1, weight2);\n    }\n  }, {\n    key: \"randomInRange\",\n    value: function randomInRange(r) {\n      return _randomInRange(r);\n    }\n  }, {\n    key: \"getRangeValue\",\n    value: function getRangeValue(value) {\n      return _getRangeValue(value);\n    }\n  }, {\n    key: \"getRangeMin\",\n    value: function getRangeMin(value) {\n      return _getRangeMin(value);\n    }\n  }, {\n    key: \"getRangeMax\",\n    value: function getRangeMax(value) {\n      return _getRangeMax(value);\n    }\n  }, {\n    key: \"setRangeValue\",\n    value: function setRangeValue(source, value) {\n      return _setRangeValue(source, value);\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(options) {\n      return _getValue(options);\n    }\n  }, {\n    key: \"getDistances\",\n    value: function getDistances(pointA, pointB) {\n      return _getDistances(pointA, pointB);\n    }\n  }, {\n    key: \"getDistance\",\n    value: function getDistance(pointA, pointB) {\n      return _getDistance(pointA, pointB);\n    }\n  }, {\n    key: \"getParticleDirectionAngle\",\n    value: function getParticleDirectionAngle(direction) {\n      return _getParticleDirectionAngle(direction);\n    }\n  }, {\n    key: \"getParticleBaseVelocity\",\n    value: function getParticleBaseVelocity(direction) {\n      return _getParticleBaseVelocity(direction);\n    }\n  }, {\n    key: \"rotateVelocity\",\n    value: function rotateVelocity(velocity, angle) {\n      return _rotateVelocity(velocity, angle);\n    }\n  }, {\n    key: \"collisionVelocity\",\n    value: function collisionVelocity(v1, v2, m1, m2) {\n      return _collisionVelocity(v1, v2, m1, m2);\n    }\n  }, {\n    key: \"calcEasing\",\n    value: function calcEasing(value, type) {\n      return _calcEasing(value, type);\n    }\n  }]);\n\n  return NumberUtils;\n}();\n\nexports.NumberUtils = NumberUtils;","map":null,"metadata":{},"sourceType":"script"}