{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/16036diego/Desktop/Desktop/Blockchain/DApp Udemy Course/defi-staking-app-starter/Dapp-YF-Staking-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/16036diego/Desktop/Desktop/Blockchain/DApp Udemy Course/defi-staking-app-starter/Dapp-YF-Staking-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ColorUtils = exports.getHslFromAnimation = exports.getLinkRandomColor = exports.getLinkColor = exports.replaceColorSvg = exports.colorMix = exports.getStyleFromHsv = exports.getStyleFromHsl = exports.getStyleFromRgb = exports.getRandomRgbColor = exports.rgbaToHsva = exports.rgbToHsv = exports.hsvaToRgba = exports.hsvToRgb = exports.hsvaToHsla = exports.hsvToHsl = exports.hslaToHsva = exports.hslToHsv = exports.hslaToRgba = exports.hslToRgb = exports.stringToRgb = exports.stringToAlpha = exports.rgbToHsl = exports.colorToHsl = exports.colorToRgb = void 0;\n\nvar Utils_1 = require(\"./Utils\");\n\nvar Constants_1 = require(\"./Constants\");\n\nvar NumberUtils_1 = require(\"./NumberUtils\");\n\nfunction hue2rgb(p, q, t) {\n  var tCalc = t;\n\n  if (tCalc < 0) {\n    tCalc += 1;\n  }\n\n  if (tCalc > 1) {\n    tCalc -= 1;\n  }\n\n  if (tCalc < 1 / 6) {\n    return p + (q - p) * 6 * tCalc;\n  }\n\n  if (tCalc < 1 / 2) {\n    return q;\n  }\n\n  if (tCalc < 2 / 3) {\n    return p + (q - p) * (2 / 3 - tCalc) * 6;\n  }\n\n  return p;\n}\n\nfunction stringToRgba(input) {\n  if (input.startsWith(\"rgb\")) {\n    var regex = /rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([\\d.]+)\\s*)?\\)/i;\n    var result = regex.exec(input);\n    return result ? {\n      a: result.length > 4 ? parseFloat(result[5]) : 1,\n      b: parseInt(result[3], 10),\n      g: parseInt(result[2], 10),\n      r: parseInt(result[1], 10)\n    } : undefined;\n  } else if (input.startsWith(\"hsl\")) {\n    var _regex = /hsla?\\(\\s*(\\d+)\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*(,\\s*([\\d.]+)\\s*)?\\)/i;\n\n    var _result = _regex.exec(input);\n\n    return _result ? _hslaToRgba({\n      a: _result.length > 4 ? parseFloat(_result[5]) : 1,\n      h: parseInt(_result[1], 10),\n      l: parseInt(_result[3], 10),\n      s: parseInt(_result[2], 10)\n    }) : undefined;\n  } else if (input.startsWith(\"hsv\")) {\n    var _regex2 = /hsva?\\(\\s*(\\d+)Â°\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*(,\\s*([\\d.]+)\\s*)?\\)/i;\n\n    var _result2 = _regex2.exec(input);\n\n    return _result2 ? _hsvaToRgba({\n      a: _result2.length > 4 ? parseFloat(_result2[5]) : 1,\n      h: parseInt(_result2[1], 10),\n      s: parseInt(_result2[2], 10),\n      v: parseInt(_result2[3], 10)\n    }) : undefined;\n  } else {\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])?$/i;\n    var hexFixed = input.replace(shorthandRegex, function (_m, r, g, b, a) {\n      return r + r + g + g + b + b + (a !== undefined ? a + a : \"\");\n    });\n    var _regex3 = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?$/i;\n\n    var _result3 = _regex3.exec(hexFixed);\n\n    return _result3 ? {\n      a: _result3[4] !== undefined ? parseInt(_result3[4], 16) / 0xff : 1,\n      b: parseInt(_result3[3], 16),\n      g: parseInt(_result3[2], 16),\n      r: parseInt(_result3[1], 16)\n    } : undefined;\n  }\n}\n\nfunction _colorToRgb(input, index) {\n  var useIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  var _a, _b, _c;\n\n  if (input === undefined) {\n    return;\n  }\n\n  var color = typeof input === \"string\" ? {\n    value: input\n  } : input;\n  var res;\n\n  if (typeof color.value === \"string\") {\n    if (color.value === Constants_1.Constants.randomColorValue) {\n      res = _getRandomRgbColor();\n    } else {\n      res = _stringToRgb(color.value);\n    }\n  } else {\n    if (color.value instanceof Array) {\n      var colorSelected = Utils_1.itemFromArray(color.value, index, useIndex);\n      res = _colorToRgb({\n        value: colorSelected\n      });\n    } else {\n      var colorValue = color.value;\n      var rgbColor = (_a = colorValue.rgb) !== null && _a !== void 0 ? _a : color.value;\n\n      if (rgbColor.r !== undefined) {\n        res = rgbColor;\n      } else {\n        var hslColor = (_b = colorValue.hsl) !== null && _b !== void 0 ? _b : color.value;\n\n        if (hslColor.h !== undefined && hslColor.l !== undefined) {\n          res = _hslToRgb(hslColor);\n        } else {\n          var hsvColor = (_c = colorValue.hsv) !== null && _c !== void 0 ? _c : color.value;\n\n          if (hsvColor.h !== undefined && hsvColor.v !== undefined) {\n            res = _hsvToRgb(hsvColor);\n          }\n        }\n      }\n    }\n  }\n\n  return res;\n}\n\nexports.colorToRgb = _colorToRgb;\n\nfunction _colorToHsl(color, index) {\n  var useIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  var rgb = _colorToRgb(color, index, useIndex);\n\n  return rgb !== undefined ? _rgbToHsl(rgb) : undefined;\n}\n\nexports.colorToHsl = _colorToHsl;\n\nfunction _rgbToHsl(color) {\n  var r1 = color.r / 255;\n  var g1 = color.g / 255;\n  var b1 = color.b / 255;\n  var max = Math.max(r1, g1, b1);\n  var min = Math.min(r1, g1, b1);\n  var res = {\n    h: 0,\n    l: (max + min) / 2,\n    s: 0\n  };\n\n  if (max != min) {\n    res.s = res.l < 0.5 ? (max - min) / (max + min) : (max - min) / (2.0 - max - min);\n    res.h = r1 === max ? (g1 - b1) / (max - min) : res.h = g1 === max ? 2.0 + (b1 - r1) / (max - min) : 4.0 + (r1 - g1) / (max - min);\n  }\n\n  res.l *= 100;\n  res.s *= 100;\n  res.h *= 60;\n\n  if (res.h < 0) {\n    res.h += 360;\n  }\n\n  return res;\n}\n\nexports.rgbToHsl = _rgbToHsl;\n\nfunction _stringToAlpha(input) {\n  var _a;\n\n  return (_a = stringToRgba(input)) === null || _a === void 0 ? void 0 : _a.a;\n}\n\nexports.stringToAlpha = _stringToAlpha;\n\nfunction _stringToRgb(input) {\n  return stringToRgba(input);\n}\n\nexports.stringToRgb = _stringToRgb;\n\nfunction _hslToRgb(hsl) {\n  var result = {\n    b: 0,\n    g: 0,\n    r: 0\n  };\n  var hslPercent = {\n    h: hsl.h / 360,\n    l: hsl.l / 100,\n    s: hsl.s / 100\n  };\n\n  if (hslPercent.s === 0) {\n    result.b = hslPercent.l;\n    result.g = hslPercent.l;\n    result.r = hslPercent.l;\n  } else {\n    var q = hslPercent.l < 0.5 ? hslPercent.l * (1 + hslPercent.s) : hslPercent.l + hslPercent.s - hslPercent.l * hslPercent.s;\n    var p = 2 * hslPercent.l - q;\n    result.r = hue2rgb(p, q, hslPercent.h + 1 / 3);\n    result.g = hue2rgb(p, q, hslPercent.h);\n    result.b = hue2rgb(p, q, hslPercent.h - 1 / 3);\n  }\n\n  result.r = Math.floor(result.r * 255);\n  result.g = Math.floor(result.g * 255);\n  result.b = Math.floor(result.b * 255);\n  return result;\n}\n\nexports.hslToRgb = _hslToRgb;\n\nfunction _hslaToRgba(hsla) {\n  var rgbResult = _hslToRgb(hsla);\n\n  return {\n    a: hsla.a,\n    b: rgbResult.b,\n    g: rgbResult.g,\n    r: rgbResult.r\n  };\n}\n\nexports.hslaToRgba = _hslaToRgba;\n\nfunction _hslToHsv(hsl) {\n  var l = hsl.l / 100,\n      sl = hsl.s / 100;\n  var v = l + sl * Math.min(l, 1 - l),\n      sv = !v ? 0 : 2 * (1 - l / v);\n  return {\n    h: hsl.h,\n    s: sv * 100,\n    v: v * 100\n  };\n}\n\nexports.hslToHsv = _hslToHsv;\n\nfunction _hslaToHsva(hsla) {\n  var hsvResult = _hslToHsv(hsla);\n\n  return {\n    a: hsla.a,\n    h: hsvResult.h,\n    s: hsvResult.s,\n    v: hsvResult.v\n  };\n}\n\nexports.hslaToHsva = _hslaToHsva;\n\nfunction _hsvToHsl(hsv) {\n  var v = hsv.v / 100,\n      sv = hsv.s / 100;\n  var l = v * (1 - sv / 2),\n      sl = l === 0 || l === 1 ? 0 : (v - l) / Math.min(l, 1 - l);\n  return {\n    h: hsv.h,\n    l: l * 100,\n    s: sl * 100\n  };\n}\n\nexports.hsvToHsl = _hsvToHsl;\n\nfunction _hsvaToHsla(hsva) {\n  var hslResult = _hsvToHsl(hsva);\n\n  return {\n    a: hsva.a,\n    h: hslResult.h,\n    l: hslResult.l,\n    s: hslResult.s\n  };\n}\n\nexports.hsvaToHsla = _hsvaToHsla;\n\nfunction _hsvToRgb(hsv) {\n  var result = {\n    b: 0,\n    g: 0,\n    r: 0\n  };\n  var hsvPercent = {\n    h: hsv.h / 60,\n    s: hsv.s / 100,\n    v: hsv.v / 100\n  };\n  var c = hsvPercent.v * hsvPercent.s,\n      x = c * (1 - Math.abs(hsvPercent.h % 2 - 1));\n  var tempRgb;\n\n  if (hsvPercent.h >= 0 && hsvPercent.h <= 1) {\n    tempRgb = {\n      r: c,\n      g: x,\n      b: 0\n    };\n  } else if (hsvPercent.h > 1 && hsvPercent.h <= 2) {\n    tempRgb = {\n      r: x,\n      g: c,\n      b: 0\n    };\n  } else if (hsvPercent.h > 2 && hsvPercent.h <= 3) {\n    tempRgb = {\n      r: 0,\n      g: c,\n      b: x\n    };\n  } else if (hsvPercent.h > 3 && hsvPercent.h <= 4) {\n    tempRgb = {\n      r: 0,\n      g: x,\n      b: c\n    };\n  } else if (hsvPercent.h > 4 && hsvPercent.h <= 5) {\n    tempRgb = {\n      r: x,\n      g: 0,\n      b: c\n    };\n  } else if (hsvPercent.h > 5 && hsvPercent.h <= 6) {\n    tempRgb = {\n      r: c,\n      g: 0,\n      b: x\n    };\n  }\n\n  if (tempRgb) {\n    var m = hsvPercent.v - c;\n    result.r = Math.floor((tempRgb.r + m) * 255);\n    result.g = Math.floor((tempRgb.g + m) * 255);\n    result.b = Math.floor((tempRgb.b + m) * 255);\n  }\n\n  return result;\n}\n\nexports.hsvToRgb = _hsvToRgb;\n\nfunction _hsvaToRgba(hsva) {\n  var rgbResult = _hsvToRgb(hsva);\n\n  return {\n    a: hsva.a,\n    b: rgbResult.b,\n    g: rgbResult.g,\n    r: rgbResult.r\n  };\n}\n\nexports.hsvaToRgba = _hsvaToRgba;\n\nfunction _rgbToHsv(rgb) {\n  var rgbPercent = {\n    r: rgb.r / 255,\n    g: rgb.g / 255,\n    b: rgb.b / 255\n  },\n      xMax = Math.max(rgbPercent.r, rgbPercent.g, rgbPercent.b),\n      xMin = Math.min(rgbPercent.r, rgbPercent.g, rgbPercent.b),\n      v = xMax,\n      c = xMax - xMin;\n  var h = 0;\n\n  if (v === rgbPercent.r) {\n    h = 60 * ((rgbPercent.g - rgbPercent.b) / c);\n  } else if (v === rgbPercent.g) {\n    h = 60 * (2 + (rgbPercent.b - rgbPercent.r) / c);\n  } else if (v === rgbPercent.b) {\n    h = 60 * (4 + (rgbPercent.r - rgbPercent.g) / c);\n  }\n\n  var s = !v ? 0 : c / v;\n  return {\n    h: h,\n    s: s * 100,\n    v: v * 100\n  };\n}\n\nexports.rgbToHsv = _rgbToHsv;\n\nfunction _rgbaToHsva(rgba) {\n  var hsvResult = _rgbToHsv(rgba);\n\n  return {\n    a: rgba.a,\n    h: hsvResult.h,\n    s: hsvResult.s,\n    v: hsvResult.v\n  };\n}\n\nexports.rgbaToHsva = _rgbaToHsva;\n\nfunction _getRandomRgbColor(min) {\n  var fixedMin = min !== null && min !== void 0 ? min : 0;\n  return {\n    b: Math.floor(NumberUtils_1.randomInRange(NumberUtils_1.setRangeValue(fixedMin, 256))),\n    g: Math.floor(NumberUtils_1.randomInRange(NumberUtils_1.setRangeValue(fixedMin, 256))),\n    r: Math.floor(NumberUtils_1.randomInRange(NumberUtils_1.setRangeValue(fixedMin, 256)))\n  };\n}\n\nexports.getRandomRgbColor = _getRandomRgbColor;\n\nfunction _getStyleFromRgb(color, opacity) {\n  return \"rgba(\".concat(color.r, \", \").concat(color.g, \", \").concat(color.b, \", \").concat(opacity !== null && opacity !== void 0 ? opacity : 1, \")\");\n}\n\nexports.getStyleFromRgb = _getStyleFromRgb;\n\nfunction _getStyleFromHsl(color, opacity) {\n  return \"hsla(\".concat(color.h, \", \").concat(color.s, \"%, \").concat(color.l, \"%, \").concat(opacity !== null && opacity !== void 0 ? opacity : 1, \")\");\n}\n\nexports.getStyleFromHsl = _getStyleFromHsl;\n\nfunction _getStyleFromHsv(color, opacity) {\n  return _getStyleFromHsl(_hsvToHsl(color), opacity);\n}\n\nexports.getStyleFromHsv = _getStyleFromHsv;\n\nfunction colorMix(color1, color2, size1, size2) {\n  var rgb1 = color1;\n  var rgb2 = color2;\n\n  if (rgb1.r === undefined) {\n    rgb1 = _hslToRgb(color1);\n  }\n\n  if (rgb2.r === undefined) {\n    rgb2 = _hslToRgb(color2);\n  }\n\n  return {\n    b: NumberUtils_1.mix(rgb1.b, rgb2.b, size1, size2),\n    g: NumberUtils_1.mix(rgb1.g, rgb2.g, size1, size2),\n    r: NumberUtils_1.mix(rgb1.r, rgb2.r, size1, size2)\n  };\n}\n\nexports.colorMix = colorMix;\n\nfunction _replaceColorSvg(imageShape, color, opacity) {\n  var svgData = imageShape.svgData;\n\n  if (!svgData) {\n    return \"\";\n  }\n\n  if (svgData.includes(\"fill\")) {\n    var currentColor = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\n    return svgData.replace(currentColor, function () {\n      return _getStyleFromHsl(color, opacity);\n    });\n  }\n\n  var preFillIndex = svgData.indexOf(\">\");\n  return \"\".concat(svgData.substring(0, preFillIndex), \" fill=\\\"\").concat(_getStyleFromHsl(color, opacity), \"\\\"\").concat(svgData.substring(preFillIndex));\n}\n\nexports.replaceColorSvg = _replaceColorSvg;\n\nfunction _getLinkColor(p1, p2, linkColor) {\n  var _a, _b;\n\n  if (linkColor === Constants_1.Constants.randomColorValue) {\n    return _getRandomRgbColor();\n  } else if (linkColor === \"mid\") {\n    var sourceColor = (_a = p1.getFillColor()) !== null && _a !== void 0 ? _a : p1.getStrokeColor();\n    var destColor = (_b = p2 === null || p2 === void 0 ? void 0 : p2.getFillColor()) !== null && _b !== void 0 ? _b : p2 === null || p2 === void 0 ? void 0 : p2.getStrokeColor();\n\n    if (sourceColor && destColor && p2) {\n      return colorMix(sourceColor, destColor, p1.getRadius(), p2.getRadius());\n    } else {\n      var hslColor = sourceColor !== null && sourceColor !== void 0 ? sourceColor : destColor;\n\n      if (hslColor) {\n        return _hslToRgb(hslColor);\n      }\n    }\n  } else {\n    return linkColor;\n  }\n}\n\nexports.getLinkColor = _getLinkColor;\n\nfunction _getLinkRandomColor(optColor, blink, consent) {\n  var color = typeof optColor === \"string\" ? optColor : optColor.value;\n\n  if (color === Constants_1.Constants.randomColorValue) {\n    if (consent) {\n      return _colorToRgb({\n        value: color\n      });\n    } else if (blink) {\n      return Constants_1.Constants.randomColorValue;\n    } else {\n      return Constants_1.Constants.midColorValue;\n    }\n  } else {\n    return _colorToRgb({\n      value: color\n    });\n  }\n}\n\nexports.getLinkRandomColor = _getLinkRandomColor;\n\nfunction _getHslFromAnimation(animation) {\n  return animation !== undefined ? {\n    h: animation.h.value,\n    s: animation.s.value,\n    l: animation.l.value\n  } : undefined;\n}\n\nexports.getHslFromAnimation = _getHslFromAnimation;\n\nvar ColorUtils = /*#__PURE__*/function () {\n  function ColorUtils() {\n    _classCallCheck(this, ColorUtils);\n  }\n\n  _createClass(ColorUtils, null, [{\n    key: \"colorToRgb\",\n    value: function colorToRgb(input, index) {\n      var useIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      return _colorToRgb(input, index, useIndex);\n    }\n  }, {\n    key: \"colorToHsl\",\n    value: function colorToHsl(color, index) {\n      var useIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      return _colorToHsl(color, index, useIndex);\n    }\n  }, {\n    key: \"rgbToHsl\",\n    value: function rgbToHsl(color) {\n      return _rgbToHsl(color);\n    }\n  }, {\n    key: \"stringToAlpha\",\n    value: function stringToAlpha(input) {\n      return _stringToAlpha(input);\n    }\n  }, {\n    key: \"stringToRgb\",\n    value: function stringToRgb(input) {\n      return _stringToRgb(input);\n    }\n  }, {\n    key: \"hslToRgb\",\n    value: function hslToRgb(hsl) {\n      return _hslToRgb(hsl);\n    }\n  }, {\n    key: \"hslaToRgba\",\n    value: function hslaToRgba(hsla) {\n      return _hslaToRgba(hsla);\n    }\n  }, {\n    key: \"hslToHsv\",\n    value: function hslToHsv(hsl) {\n      return _hslToHsv(hsl);\n    }\n  }, {\n    key: \"hslaToHsva\",\n    value: function hslaToHsva(hsla) {\n      return _hslaToHsva(hsla);\n    }\n  }, {\n    key: \"hsvToHsl\",\n    value: function hsvToHsl(hsv) {\n      return _hsvToHsl(hsv);\n    }\n  }, {\n    key: \"hsvaToHsla\",\n    value: function hsvaToHsla(hsva) {\n      return _hsvaToHsla(hsva);\n    }\n  }, {\n    key: \"hsvToRgb\",\n    value: function hsvToRgb(hsv) {\n      return _hsvToRgb(hsv);\n    }\n  }, {\n    key: \"hsvaToRgba\",\n    value: function hsvaToRgba(hsva) {\n      return _hsvaToRgba(hsva);\n    }\n  }, {\n    key: \"rgbToHsv\",\n    value: function rgbToHsv(rgb) {\n      return _rgbToHsv(rgb);\n    }\n  }, {\n    key: \"rgbaToHsva\",\n    value: function rgbaToHsva(rgba) {\n      return _rgbaToHsva(rgba);\n    }\n  }, {\n    key: \"getRandomRgbColor\",\n    value: function getRandomRgbColor(min) {\n      return _getRandomRgbColor(min);\n    }\n  }, {\n    key: \"getStyleFromRgb\",\n    value: function getStyleFromRgb(color, opacity) {\n      return _getStyleFromRgb(color, opacity);\n    }\n  }, {\n    key: \"getStyleFromHsl\",\n    value: function getStyleFromHsl(color, opacity) {\n      return _getStyleFromHsl(color, opacity);\n    }\n  }, {\n    key: \"getStyleFromHsv\",\n    value: function getStyleFromHsv(color, opacity) {\n      return _getStyleFromHsv(color, opacity);\n    }\n  }, {\n    key: \"mix\",\n    value: function mix(color1, color2, size1, size2) {\n      return colorMix(color1, color2, size1, size2);\n    }\n  }, {\n    key: \"replaceColorSvg\",\n    value: function replaceColorSvg(imageShape, color, opacity) {\n      return _replaceColorSvg(imageShape, color, opacity);\n    }\n  }, {\n    key: \"getLinkColor\",\n    value: function getLinkColor(p1, p2, linkColor) {\n      return _getLinkColor(p1, p2, linkColor);\n    }\n  }, {\n    key: \"getLinkRandomColor\",\n    value: function getLinkRandomColor(optColor, blink, consent) {\n      return _getLinkRandomColor(optColor, blink, consent);\n    }\n  }, {\n    key: \"getHslFromAnimation\",\n    value: function getHslFromAnimation(animation) {\n      return _getHslFromAnimation(animation);\n    }\n  }]);\n\n  return ColorUtils;\n}();\n\nexports.ColorUtils = ColorUtils;","map":null,"metadata":{},"sourceType":"script"}