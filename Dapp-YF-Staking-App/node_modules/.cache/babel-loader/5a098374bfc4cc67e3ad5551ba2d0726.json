{"ast":null,"code":"var _classCallCheck = require(\"/Users/16036diego/Desktop/Desktop/Blockchain/DApp Udemy Course/defi-staking-app-starter/Dapp-YF-Staking-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/16036diego/Desktop/Desktop/Blockchain/DApp Udemy Course/defi-staking-app-starter/Dapp-YF-Staking-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/16036diego/Desktop/Desktop/Blockchain/DApp Udemy Course/defi-staking-app-starter/Dapp-YF-Staking-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/16036diego/Desktop/Desktop/Blockchain/DApp Udemy Course/defi-staking-app-starter/Dapp-YF-Staking-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/16036diego/Desktop/Desktop/Blockchain/DApp Udemy Course/defi-staking-app-starter/Dapp-YF-Staking-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _require = require('stream'),\n    Transform = _require.Transform;\n\nmodule.exports = function (KeccakState) {\n  return /*#__PURE__*/function (_Transform) {\n    \"use strict\";\n\n    _inherits(Keccak, _Transform);\n\n    function Keccak(rate, capacity, delimitedSuffix, hashBitLength, options) {\n      var _this;\n\n      _classCallCheck(this, Keccak);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Keccak).call(this, options));\n      _this._rate = rate;\n      _this._capacity = capacity;\n      _this._delimitedSuffix = delimitedSuffix;\n      _this._hashBitLength = hashBitLength;\n      _this._options = options;\n      _this._state = new KeccakState();\n\n      _this._state.initialize(rate, capacity);\n\n      _this._finalized = false;\n      return _this;\n    }\n\n    _createClass(Keccak, [{\n      key: \"_transform\",\n      value: function _transform(chunk, encoding, callback) {\n        var error = null;\n\n        try {\n          this.update(chunk, encoding);\n        } catch (err) {\n          error = err;\n        }\n\n        callback(error);\n      }\n    }, {\n      key: \"_flush\",\n      value: function _flush(callback) {\n        var error = null;\n\n        try {\n          this.push(this.digest());\n        } catch (err) {\n          error = err;\n        }\n\n        callback(error);\n      }\n    }, {\n      key: \"update\",\n      value: function update(data, encoding) {\n        if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer');\n        if (this._finalized) throw new Error('Digest already called');\n        if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);\n\n        this._state.absorb(data);\n\n        return this;\n      }\n    }, {\n      key: \"digest\",\n      value: function digest(encoding) {\n        if (this._finalized) throw new Error('Digest already called');\n        this._finalized = true;\n        if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix);\n\n        var digest = this._state.squeeze(this._hashBitLength / 8);\n\n        if (encoding !== undefined) digest = digest.toString(encoding);\n\n        this._resetState();\n\n        return digest;\n      } // remove result from memory\n\n    }, {\n      key: \"_resetState\",\n      value: function _resetState() {\n        this._state.initialize(this._rate, this._capacity);\n\n        return this;\n      } // because sometimes we need hash right now and little later\n\n    }, {\n      key: \"_clone\",\n      value: function _clone() {\n        var clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);\n\n        this._state.copy(clone._state);\n\n        clone._finalized = this._finalized;\n        return clone;\n      }\n    }]);\n\n    return Keccak;\n  }(Transform);\n};","map":null,"metadata":{},"sourceType":"script"}