{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/16036diego/Desktop/Desktop/Blockchain/DApp Udemy Course/defi-staking-app-starter/Dapp-YF-Staking-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/16036diego/Desktop/Desktop/Blockchain/DApp Udemy Course/defi-staking-app-starter/Dapp-YF-Staking-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/16036diego/Desktop/Desktop/Blockchain/DApp Udemy Course/defi-staking-app-starter/Dapp-YF-Staking-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Plugins = void 0;\nvar plugins = [];\nvar interactorsInitializers = new Map();\nvar updatersInitializers = new Map();\nvar interactors = new Map();\nvar updaters = new Map();\nvar presets = new Map();\nvar drawers = new Map();\nvar pathGenerators = new Map();\n\nvar Plugins = /*#__PURE__*/function () {\n  function Plugins() {\n    _classCallCheck(this, Plugins);\n  }\n\n  _createClass(Plugins, null, [{\n    key: \"getPlugin\",\n    value: function getPlugin(plugin) {\n      return plugins.find(function (t) {\n        return t.id === plugin;\n      });\n    }\n  }, {\n    key: \"addPlugin\",\n    value: function addPlugin(plugin) {\n      if (!Plugins.getPlugin(plugin.id)) {\n        plugins.push(plugin);\n      }\n    }\n  }, {\n    key: \"getAvailablePlugins\",\n    value: function getAvailablePlugins(container) {\n      var res = new Map();\n\n      var _iterator = _createForOfIteratorHelper(plugins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var plugin = _step.value;\n\n          if (!plugin.needsPlugin(container.actualOptions)) {\n            continue;\n          }\n\n          res.set(plugin.id, plugin.getPlugin(container));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return res;\n    }\n  }, {\n    key: \"loadOptions\",\n    value: function loadOptions(options, sourceOptions) {\n      var _iterator2 = _createForOfIteratorHelper(plugins),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var plugin = _step2.value;\n          plugin.loadOptions(options, sourceOptions);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"getPreset\",\n    value: function getPreset(preset) {\n      return presets.get(preset);\n    }\n  }, {\n    key: \"addPreset\",\n    value: function addPreset(presetKey, options) {\n      var override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (override || !Plugins.getPreset(presetKey)) {\n        presets.set(presetKey, options);\n      }\n    }\n  }, {\n    key: \"addShapeDrawer\",\n    value: function addShapeDrawer(type, drawer) {\n      if (!Plugins.getShapeDrawer(type)) {\n        drawers.set(type, drawer);\n      }\n    }\n  }, {\n    key: \"getShapeDrawer\",\n    value: function getShapeDrawer(type) {\n      return drawers.get(type);\n    }\n  }, {\n    key: \"getSupportedShapes\",\n    value: function getSupportedShapes() {\n      return drawers.keys();\n    }\n  }, {\n    key: \"getPathGenerator\",\n    value: function getPathGenerator(type) {\n      return pathGenerators.get(type);\n    }\n  }, {\n    key: \"addPathGenerator\",\n    value: function addPathGenerator(type, pathGenerator) {\n      if (!Plugins.getPathGenerator(type)) {\n        pathGenerators.set(type, pathGenerator);\n      }\n    }\n  }, {\n    key: \"getInteractors\",\n    value: function getInteractors(container) {\n      var res = interactors.get(container);\n\n      if (!res) {\n        res = _toConsumableArray(interactorsInitializers.values()).map(function (t) {\n          return t(container);\n        });\n        interactors.set(container, res);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"addInteractor\",\n    value: function addInteractor(name, initInteractor) {\n      interactorsInitializers.set(name, initInteractor);\n    }\n  }, {\n    key: \"getUpdaters\",\n    value: function getUpdaters(container) {\n      var res = updaters.get(container);\n\n      if (!res) {\n        res = _toConsumableArray(updatersInitializers.values()).map(function (t) {\n          return t(container);\n        });\n        updaters.set(container, res);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"addParticleUpdater\",\n    value: function addParticleUpdater(name, initUpdater) {\n      updatersInitializers.set(name, initUpdater);\n    }\n  }]);\n\n  return Plugins;\n}();\n\nexports.Plugins = Plugins;","map":null,"metadata":{},"sourceType":"script"}